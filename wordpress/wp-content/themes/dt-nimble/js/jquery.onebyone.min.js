/* 
	Author: http://codecanyon.net/user/sike
	Modifications: Miroslav Varsky (from Dream-Theme.com)
*/

;(function($) {
	// the available ease animation style
	var easeTypeArr = [
		'fadeIn',
		'fadeInUp',
		'fadeInDown',
		'fadeInLeft',
		'fadeInRight',
		'bounceIn',
		'bounceInDown',
		'bounceInUp',
		'bounceInLeft',
		'bounceInRight',
		'rotateInDownLeft',
		'rotateInDownRight',
		'rotateInUpLeft',
		'rotateInUpRight'
	];

	var easeTypeNum = easeTypeArr.length;

	$.fn.oneByOne = function(options) {
		// plugin default options
		var settings = { 
			className: 'oneByOne', 
			sliderClassName: 'oneByOne_item',
			easeType: 'fadeInLeft',
			width: 960,
			height: 420, 
			delay: 500,
			tolerance: 0.8,	
			enableDrag: true,
			showArrow: true,
			showButton: false,
			slideShow: false,
			slideShowDelay: 3000
		};

		// extends settings with options provided
		if (options) {
			$.extend(settings, options);
		}

		var parent;
		var _this;
		var _loading;
		var currentBannerNum = -1;

		var bannerWidth = settings.width;
		var bannerHeight = settings.height;
		var xdiff = 0;
		var isMouseDown = false;
		var isTweenning = false;

		// store the ease animation style of each slider
		var realEaseTypeArr = []; 
		var _easeType;

		var bannerArr = [];
		var bannerNum = 0;
		var _preBannerNum = 0, buttonArea, buttonCon, arrowButton;
		//window.length_obo = jQuery('.oneByOne_item').length;

		_this = this;
		_this.wrap('<div class="' + settings.className + '"/>');

		parent = _this.parent();
		parent.css('overflow', 'hidden');
		
		_loading = $("<div></div>").addClass("loading-label").appendTo(parent);
		
		_this.find('.'+settings.sliderClassName).each(function(index) {
 			$(this).hide();
			bannerNum++;
			$(this).css('left', bannerWidth*index);
			bannerArr[index] = $(this);
		});

		//if(length_obo <= 1) {
		//} else {

			// add the mobile touch screen support

			_this.bind('touchstart', function (event) {
				//event.preventDefault();	

				var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];
				if (!isMouseDown) {
					isMouseDown = true;
					this.mouseX = touch.pageX;
				}  

				//if(buttonCon)buttonCon.fadeIn();
				//if(arrowButton)arrowButton.fadeIn();
				//return false;
			});

			_this.bind('touchmove', function (event) {
				//event.preventDefault();

				var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];
				if (isMouseDown) {
					xdiff = touch.pageX - this.mouseX;

					if (Math.abs(xdiff)>20) {
						event.preventDefault();
						_this.css('left', -currentBannerNum * bannerWidth + xdiff);
					}

					if (settings.slideShow) {
						stopSlideShow();

					}
				}

				//return false;
			});

			_this.bind('touchend', function (event) {
				//event.preventDefault();
				isMouseDown = false;

				var _n = currentBannerNum;
				var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];
				var fullWidth = parseInt(settings.width);
				var halfWidth = fullWidth / 2;

				if (!xdiff) return false;

				if (xdiff < -(150 * settings.tolerance)) {
					nextBanner();
				} else if (xdiff > 150 * settings.tolerance) {
					prevBanner();
				} else {
					tweenTo(_n);	  
					if (settings.slideShow) {
						startSlideShow();
					}
				}

				xdiff = 0;

				//if(buttonCon)buttonCon.delay(400).fadeOut();
				//if(arrowButton)arrowButton.delay(400).fadeOut();
				//return false;
			});


			// enable or disable the drag function of the slider
			if(settings.enableDrag) {

	 			_this.mousedown(function (event) {
					if (!isMouseDown) {
						isMouseDown = true;
						this.mouseX = event.pageX;
					}
					return false;
				});

				_this.mousemove(function (event) {
					if (isMouseDown) {
					   	xdiff = event.pageX - this.mouseX;
					   	//if (Math.abs(xdiff)>20) event.preventDefault();
						_this.css('left', -currentBannerNum * bannerWidth + xdiff);
						if (settings.slideShow) {
							stopSlideShow();
						}
					}
					return false;
				});


				_this.mouseup(function (event) {
					isMouseDown = false;
					var _n = currentBannerNum;
					var fullWidth = parseInt(settings.width);
					var halfWidth = fullWidth / 2;
					
					if (!xdiff) return false;
					
					if (xdiff < -(200 * settings.tolerance)) {
						nextBanner();
					} else if (xdiff > 200 * settings.tolerance) {
						prevBanner();
					} else {
						tweenTo(_n);
						if (settings.slideShow) {
							startSlideShow();
						}
					}
					xdiff = 0;
					return false;
				});

				_this.mouseleave(function (event) {
					$(this).mouseup();
				});
				
			}

			/*
			parent.mouseover(function (event){
				if(buttonCon)buttonCon.fadeIn(); 
				if(arrowButton)arrowButton.fadeIn(); 				
			});
	
			parent.mouseleave(function (event){
				if(buttonCon)buttonCon.fadeOut(); 
				if(arrowButton)arrowButton.fadeOut();
			});
			*/
		//}

  		// add the circle buttons
		if(settings.showButton){
			buttonArea = $('<div class="buttonArea"><div class="buttonCon"></div></div>');
			// buttonArea.hide();
			parent.append(buttonArea);						 
			buttonCon = buttonArea.find('.buttonCon');
			for(var i = 0; i < bannerNum; i++){
					buttonCon.append('<a class="theButton" rel="'+ i +'">'+ (i + 1) +'</a>').css('cursor', 'pointer');
			}			   
				 
			$('.buttonCon a:eq('+ currentBannerNum +')', buttonArea).addClass('active');
			$('.buttonCon a', buttonArea).bind('click', function(event){						 
				if($(this).hasClass('active')) return false;   
				var _n = $(this).attr('rel'); 	
				tweenTo(_n);
			});	 
		
		}
				
		// add the previous/next arrow buttons
		if (settings.showArrow) {

			arrowButton = $('<div class="navig-nivo onebyone"><div class="nivo-directionNav"><a class="nivo-prevNav"><span class="a-l">&#8249;</span><span class="a-r">&#8249;</span></a><a class="nivo-nextNav"><span class="a-l">&#8250;</span><span class="a-r">&#8250;</span></a></div></div>');
			jQuery('#slide').after(arrowButton);

			var _next = $('.nivo-nextNav', arrowButton).bind('click', function(event) {
				nextBanner();
			});
			var _prev = $('.nivo-prevNav', arrowButton).bind('click', function(event) {
				prevBanner();
			});
			
			$('.nivo-prevNav', arrowButton).hover(
				function() {

					var $this	= $(this),
						$front	= $this.find('span.a-l'),
						$back	= $this.find('span.a-r').show();
	
					if($this.is(".temp_disabled") || $this.is(".disabled")) return;
		
					$front.stop().animate({			
						"margin-left": "-2px"
					}, 200);
					$back.stop().animate({				
						"margin-left": "2px"
					}, 200);
	
				}, function() {
	
					var $this	= $(this),
						$front	= $this.find('span.a-l'),
						$back	= $this.find('span.a-r');
	
					$front.stop().animate({				
						"margin-left": 0
					}, 150);
	
					$back.stop().animate({				
						"margin-left": 0
					}, 150, function() {
						$back.hide();
					});
	
				}
			);
	
	
			$('.nivo-nextNav', arrowButton).hover(
				function() {
	
					var $this	= $(this),
						$front	= $this.find('span.a-l'),
						$back	= $this.find('span.a-r').show();
	
					if($this.is(".temp_disabled") || $this.is(".disabled")) return;
	
					$front.stop().animate({			
						"margin-left": "2px"
					}, 200);
					$back.stop().animate({				
						"margin-left": "-2px"
					}, 200);
	
				}, function() {
	
					var $this	= $(this),
						$front	= $this.find('span.a-l'),
						$back	= $this.find('span.a-r');
	
					$front.stop().animate({				
						"margin-left": 0
					}, 150);
	
					$back.stop().animate({				
						"margin-left": 0
					}, 150, function() {
						$back.hide();
					});
	
				}
			);
		}

  		if(buttonCon)buttonCon.hide(); 
		if(arrowButton)arrowButton.hide();


		tweenTo(0);
		if(settings.slideShow) {
			slideShowInt = setInterval(function() {
				nextBanner();
			}, settings.slideShowDelay);
			_this.data('interval', slideShowInt);
		}			 

		// move to the certain slider via a number, display the slider content one by one
		function tweenTo(n){
			_loading.fadeOut(500);

			if (settings.slideShow) {
				stopSlideShow();
			}
			var smartDelay = Math.abs(n - currentBannerNum);
			if($.browser.msie && $.browser.version == 9){
				_this.fadeOut();
				_this.addClass("animate-slide").animate({
					left: -n * bannerWidth
				}, settings.delay, function(){
					_this.removeClass("animate-slide");
					if(n!=currentBannerNum) {
	
					_preBannerNum = currentBannerNum;	 
	
					if(bannerArr[_preBannerNum]){
						// if(bannerArr[_preBannerNum].children().length>1){
							if(!($.browser.msie||$.browser.opera)){
								bannerArr[_preBannerNum].hide();
							} else {
								bannerArr[_preBannerNum].fadeOut();
							}
						// }
						$('.buttonArea a:eq('+ _preBannerNum +')', parent).removeClass('active');									
					}				
			
					$('.buttonArea a:eq('+ n +')', parent).addClass('active');
	
					var indEaseType	= bannerArr[n].attr("data-ease"),
						easeType	= settings.easeType;
	
					if (indEaseType) easeType = indEaseType;
	
					if(easeType!="random") {
	
						var slideLayers = bannerArr[n].show().children(),
							countLayers = slideLayers.length;
	
							slideLayers.each(function(index) {
	
								if($(this).hasClass(easeType)) {
									$(this).removeClass(easeType);
									$(this).hide();
								}
	
								var _n = countLayers - index - 1;
								$(this).show().addClass("animate"+_n+ " " + easeType);
	
							});
	
					} else {
	
						_easeType = easeTypeArr[Math.floor(Math.random()*easeTypeNum)];
						realEaseTypeArr[n] = _easeType;
	
						if(bannerArr[_preBannerNum]){
							bannerArr[_preBannerNum].children().each(function(index) {
									if($(this).hasClass(realEaseTypeArr[_preBannerNum])){
									$(this).removeClass(realEaseTypeArr[_preBannerNum]);
									$(this).hide();
										$(this).parent().removeClass('act');
								}
							});
	
						}
						
						var slideLayers = bannerArr[n].show().children(),
							countLayers = slideLayers.length;
	
						bannerArr[n].show().children().each(function(index) {
							var layerDataClass	= $(this).attr("data-class"),
								layerClass		= false;
							if (!layerDataClass) {
								layerClass = $(this).attr("class");
								$(this).attr("data-class", layerClass);
							} else {
								layerClass = layerDataClass;
								$(this).attr("class", layerClass);
							}
	
							
							
							var _n = countLayers - index - 1;
							$(this).show().addClass("animate"+_n+ " " + _easeType);
							$(this).parent().addClass('act');
						});
					}
	
					// isTweenning = false;
				//	_this.delay(bannerArr[n].children().length*200).queue(function(){
						if(settings.slideShow){
							startSlideShow();
						}
						  //jQuery(_this).dequeue();
				//	})
					/*if(settings.slideShow){
							startSlideShow();
						}*/
					if(arrowButton) arrowButton.css('cursor', 'pointer');
					currentBannerNum = n;
				}
				}).fadeIn();
			}else{				
				_this.addClass("animate-slide").css({
					left: -n * bannerWidth
				});
			

				setTimeout(function() {
				
					_this.removeClass("animate-slide");
					if(n!=currentBannerNum) {
	
					_preBannerNum = currentBannerNum;	 
	
					if(bannerArr[_preBannerNum]){
						// if(bannerArr[_preBannerNum].children().length>1){
							if(!($.browser.msie||$.browser.opera)){
								bannerArr[_preBannerNum].hide();
							} else {
								bannerArr[_preBannerNum].fadeOut();
							}
						// }
						$('.buttonArea a:eq('+ _preBannerNum +')', parent).removeClass('active');									
					}				
			
					$('.buttonArea a:eq('+ n +')', parent).addClass('active');
	
					var indEaseType	= bannerArr[n].attr("data-ease"),
						easeType	= settings.easeType;
	
					if (indEaseType) easeType = indEaseType;
	
					if(easeType!="random") {
	
						var slideLayers = bannerArr[n].show().children(),
							countLayers = slideLayers.length;
	
							slideLayers.each(function(index) {
	
								if($(this).hasClass(easeType)) {
									$(this).removeClass(easeType);
									$(this).hide();
								}
	
								var _n = countLayers - index - 1;
								$(this).show().addClass("animate"+_n+ " " + easeType);
	
							});
	
					} else {
	
						_easeType = easeTypeArr[Math.floor(Math.random()*easeTypeNum)];
						realEaseTypeArr[n] = _easeType;
	
						if(bannerArr[_preBannerNum]){
							bannerArr[_preBannerNum].children().each(function(index) {
									if($(this).hasClass(realEaseTypeArr[_preBannerNum])){
									$(this).removeClass(realEaseTypeArr[_preBannerNum]);
									$(this).hide();
										$(this).parent().removeClass('act');
								}
							});
	
						}
						
						var slideLayers = bannerArr[n].show().children(),
							countLayers = slideLayers.length;
	
						bannerArr[n].show().children().each(function(index) {
							var layerDataClass	= $(this).attr("data-class"),
								layerClass		= false;
							if (!layerDataClass) {
								layerClass = $(this).attr("class");
								$(this).attr("data-class", layerClass);
							} else {
								layerClass = layerDataClass;
								$(this).attr("class", layerClass);
							}
	
							
							
							var _n = countLayers - index - 1;
							$(this).show().addClass("animate"+_n+ " " + _easeType);
							$(this).parent().addClass('act');
						});
					}
	
					// isTweenning = false;
					_this.delay(bannerArr[n].children().length*200).queue(function(){
						if(settings.slideShow){
							startSlideShow();
						}
						  jQuery(_this).dequeue();
					})
					/*if(settings.slideShow){
							startSlideShow();
						}*/
					if(arrowButton) arrowButton.css('cursor', 'pointer');
					currentBannerNum = n;
				}
				}, 520);
			}
		}

		function stopSlideShow() {
			clearInterval(_this.data('interval'));
		}

		function startSlideShow() {
			clearInterval(_this.data('interval'));
			slideShowInt = setInterval(	function() {
				nextBanner();
			},settings.slideShowDelay);
			_this.data('interval', slideShowInt);
			
		
		}

	  	function nextBanner() {
			var _n = currentBannerNum;
			_n++;
			_n = _n >= bannerNum ? 0 : _n;
			tweenTo(_n);
		}

		function prevBanner() {
			var _n = currentBannerNum;
			_n--;
			_n = _n < 0 ? bannerNum - 1 : _n;
			tweenTo(_n);
		}

		return this;
	};

})(jQuery);
